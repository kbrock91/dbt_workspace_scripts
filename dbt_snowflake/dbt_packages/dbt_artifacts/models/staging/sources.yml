version: 2

sources:
  - name: dbt_artifacts
    database: "{{ var('dbt_artifacts_database', target.database) }}"
    schema: "{{ var('dbt_artifacts_schema', 'dbt_artifacts') }}"
    tables:
      - name: artifacts
        identifier: "{{ var('dbt_artifacts_table', 'artifacts') }}"
        description: |
          The source table containing loaded dbt artifacts. All of the artifacts must be loaded into this table
          if using the V1 upload. See the README for more info.
        columns:
          - name: data
            description: A variant type object containing all the artifact's data.
          - name: generated_at
            description: Timestamp for when the artifact was generated.
          - name: path
            description: The path of the artifact in the external stage.
          - name: artifact_type
            description: The type of the artifact, e.g. manifest.json
      - name: dbt_run_results
        identifier: "{{ var('dbt_artifacts_results_table', 'dbt_run_results') }}"
        description: |
          The source table containing the loaded metadata from run_results.json loaded artifacts. Granularity is
          `command_invocation_id`, because each step of the a multi-step dbt cloud job will generate a seperate
          run results file.

          This belongs to the V2 upload. See the README for more info.
        columns:
          - name: command_invocation_id
            description: The id of the command which resulted in the source artifact's generation.
          - name: artifact_run_id
            description:  A constructed ID to serve as a reliable identifier for a single run.
          - name: artifact_generated_at
            description: Timestamp of when the source artifact was generated.
          - name: env
            description: A JSON structure of the environment variables present during the run.
          - name: execution_command
            description: The actual command used.
          - name: was_full_refresh
            description: Was the run executed with a --full-refresh flag?
          - name: metadata
            description: Raw JSON structure of the results.metadata field.
          - name: args
            description: Raw JSON structure of the results.args field.
      - name: dbt_run_results_nodes
        identifier: "{{ var('dbt_artifacts_result_nodes_table', 'dbt_run_results_nodes') }}"
        description: |
          The source table containing the loaded and flattened results from run_results.json loaded artifacts.
          Granularity is `command_invocation_id` & `node_id`, because each step of the a multi-step dbt cloud
          job will generate a seperate run results file, which may have one or more nodes being run at that step.

          This belongs to the V2 upload. See the README for more info.
        columns:
          - name: command_invocation_id
            description: The id of the command which resulted in the source artifact's generation.
          - name: artifact_run_id
            description: A constructed ID to serve as a reliable identifier for a single run.
          - name: artifact_generated_at
            description: Timestamp of when the source artifact was generated.
          - name: node_id
            description: Unique id for the node, in the form of exposure.[package_name].[exposure_name]
          - name: result_json
            description: Raw JSON structure of the result node.
      - name: dbt_manifest_nodes
        identifier: "{{ var('dbt_artifacts_manifest_nodes_table', 'dbt_manifest_nodes') }}"
        description: |
          The source table containing the loaded and flattened nodes (including tests, seeds, sources, models and
          exposures) from manifest.json loaded artifacts. Note that within the raw manifest file, exposures and sources
          are stored seperately from seeds, models and tests, but for convenience they are all flattened to a single table
          for this package. Granularity is `artifact_run_id` & `node_id`, because each step of the a multi-step dbt cloud
          job will generate a seperate manifest file but each will be equivalent. For this V2 upload we deduplicate that
          on _load_, so any subsequent joins must be done on `artifact_run_id` and not `command_invocation_id`.

          This belongs to the V2 upload. See the README for more info.
        columns:
          - name: command_invocation_id
            description: The id of the command which resulted in the source artifact's generation. Note that because
              manifests are generated for each step in a dbt cloud run, but the id here will be the one belonging
              to the _first_ manifest generated. For most circumstances, users should use the `artifact_run_id` to
              join on this table.
          - name: artifact_run_id
            description: A constructed ID to serve as a reliable identifier for a single run.
          - name: artifact_generated_at
            description: Timestamp of when the source artifact was generated.
          - name: node_id
            description: Unique id for the node, in the form of exposure.[package_name].[exposure_name]
          - name: node_json
            description: Raw JSON structure of the manifest node.